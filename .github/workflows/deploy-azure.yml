name: Deploy TKD Hub to Azure




permissions:
    id-token: write
    contents: read




on:
    push:
        branches: [main, master]
    pull_request:
        branches: [main, master]
    workflow_dispatch:
        inputs:
            environment:
                description: "Target environment"
                required: true
                default: "prod"
                type: choice
                options:
                    - dev
                    - prod




env:
    AZURE_WEBAPP_PACKAGE_PATH: "./src/TKDHubAPI.WebAPI"
    SPA_PATH: "./Frontend/spa"
    DOTNET_VERSION: "8.0.x"
    NODE_VERSION: "18.x"




jobs:
    test:
        name: Run Tests
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4




            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}




            - name: Restore dependencies
              run: dotnet restore




            - name: Build
              run: dotnet build --no-restore --configuration Release




            - name: Test
              run: dotnet test --no-build --configuration Release --verbosity normal --collect:"XPlat Code Coverage" --results-directory ./test-results




            - name: Upload test results
              uses: actions/upload-artifact@v4
              if: always()
              with:
                  name: test-results
                  path: ./test-results




    build-api:
        name: Build Web API
        runs-on: ubuntu-latest
        needs: test
        steps:
            - uses: actions/checkout@v4




            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}




            - name: Restore dependencies
              run: dotnet restore
              working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}




            - name: Build and publish
              run: |
                  dotnet build --configuration Release --no-restore
                  dotnet publish --configuration Release --no-build --output ./publish
              working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}




            - name: Upload Web API artifact
              uses: actions/upload-artifact@v4
              with:
                  name: web-app
                  path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/publish
                  retention-days: 1




    build-spa:
        name: Build SPA
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4




            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"




            - name: Install dependencies
              run: |
                  echo "Frontend directory contents:"
                  ls -la Frontend/
                  echo "Changing to Frontend/spa directory:"
                  cd Frontend/spa
                  echo "SPA directory contents:"
                  ls -la
                  npm ci




            - name: Build SPA
              run: |
                  cd Frontend/spa
                  npm run build




            - name: Upload SPA artifact
              uses: actions/upload-artifact@v4
              with:
                  name: spa-dist
                  path: "Frontend/spa/dist"
                  retention-days: 1




    deploy-infrastructure:
        name: Deploy Infrastructure
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
        environment: ${{ github.event.inputs.environment || 'prod' }}
        outputs:
            webAppName: ${{ steps.deploy.outputs.webAppName }}
            webAppUrl: ${{ steps.deploy.outputs.webAppUrl }}
            staticWebAppName: ${{ steps.deploy.outputs.staticWebAppName }}
            staticWebAppUrl: ${{ steps.deploy.outputs.staticWebAppUrl }}
        steps:
            - uses: actions/checkout@v4




            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}




            - name: Create Resource Group
              run: |
                  az group create --name ${{ secrets.AZURE_RG_NAME }} --location "${{ secrets.AZURE_LOCATION || 'eastus' }}"




            - name: Validate Bicep template
              run: |
                  echo "Validating Bicep template..."
                  az deployment group validate \
                    --resource-group "${{ secrets.AZURE_RG_NAME }}" \
                    --template-file ./infra/.main.bicep \
                    --parameters \
                      appName="${{ secrets.APP_NAME }}" \
                      location="${{ secrets.AZURE_LOCATION || 'eastus' }}" \
                      sqlAdminLogin="${{ secrets.SQL_ADMIN_LOGIN }}" \
                      sqlAdminPassword="${{ secrets.SQL_ADMIN_PASSWORD }}" \
                      environment="${{ github.event.inputs.environment || 'prod' }}"
                  echo "Template validation completed"




            - name: Deploy Bicep template
              id: deploy
              run: |
                  deployment_name="tkdhub-deployment-${{ github.run_number }}"
                  echo "Starting deployment: $deployment_name"
                  echo "Resource Group: ${{ secrets.AZURE_RG_NAME }}"
                  echo "Template File: ./infra/.main.bicep"
                 
                  # Check if template file exists
                  if [ ! -f "./infra/.main.bicep" ]; then
                    echo "ERROR: Template file ./infra/.main.bicep not found!"
                    exit 1
                  fi
                 
                  # Deploy using Azure CLI with verbose output
                  echo "Executing deployment..."
                  az deployment group create \
                    --resource-group "${{ secrets.AZURE_RG_NAME }}" \
                    --template-file ./infra/.main.bicep \
                    --name "$deployment_name" \
                    --parameters \
                      appName="${{ secrets.APP_NAME }}" \
                      location="${{ secrets.AZURE_LOCATION || 'eastus' }}" \
                      sqlAdminLogin="${{ secrets.SQL_ADMIN_LOGIN }}" \
                      sqlAdminPassword="${{ secrets.SQL_ADMIN_PASSWORD }}" \
                      environment="${{ github.event.inputs.environment || 'prod' }}" \
                    --verbose \
                    --output table
                 
                  echo "Getting deployment outputs..."
                  deployment_output=$(az deployment group show \
                    --resource-group "${{ secrets.AZURE_RG_NAME }}" \
                    --name "$deployment_name" \
                    --output json)
                 
                  # Extract outputs for use in later jobs
                  echo "webAppName=$(echo $deployment_output | jq -r '.properties.outputs.webAppName.value')" >> $GITHUB_OUTPUT
                  echo "webAppUrl=$(echo $deployment_output | jq -r '.properties.outputs.webAppUrl.value')" >> $GITHUB_OUTPUT
                  echo "staticWebAppName=$(echo $deployment_output | jq -r '.properties.outputs.staticWebAppName.value')" >> $GITHUB_OUTPUT
                  echo "staticWebAppUrl=$(echo $deployment_output | jq -r '.properties.outputs.staticWebAppUrl.value')" >> $GITHUB_OUTPUT




    deploy-web-app:
        name: Deploy Web API
        runs-on: ubuntu-latest
        needs: [build-api, deploy-infrastructure]
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
        environment: ${{ github.event.inputs.environment || 'prod' }}
        steps:
            - name: Download Web API artifact
              uses: actions/download-artifact@v4
              with:
                  name: web-app
                  path: ./web-app


            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}


            - name: Debug Infrastructure Outputs
              run: |
                  echo "=== Infrastructure Job Outputs ==="
                  echo "webAppName: '${{ needs.deploy-infrastructure.outputs.webAppName }}'"
                  echo "webAppUrl: '${{ needs.deploy-infrastructure.outputs.webAppUrl }}'"
                  echo "staticWebAppName: '${{ needs.deploy-infrastructure.outputs.staticWebAppName }}'"
                  echo "staticWebAppUrl: '${{ needs.deploy-infrastructure.outputs.staticWebAppUrl }}'"
                 
                  # Check if webAppName is empty
                  if [ -z "${{ needs.deploy-infrastructure.outputs.webAppName }}" ]; then
                    echo "ERROR: webAppName is empty! Infrastructure deployment may have failed."
                    echo "Attempting to find the web app name manually..."
                   
                    # Try to find the web app in the resource group
                    az webapp list --resource-group "${{ secrets.AZURE_RG_NAME }}" --output table
                   
                    # Get the app name pattern
                    expected_app_name="${{ secrets.APP_NAME }}-api"
                    echo "Expected app name: $expected_app_name"
                   
                    # Check if it exists
                    if az webapp show --name "$expected_app_name" --resource-group "${{ secrets.AZURE_RG_NAME }}" >/dev/null 2>&1; then
                      echo "Found web app: $expected_app_name"
                      echo "webapp_name=$expected_app_name" >> $GITHUB_ENV
                    else
                      echo "Web app not found. Infrastructure deployment likely failed."
                      exit 1
                    fi
                  else
                    echo "webAppName found: ${{ needs.deploy-infrastructure.outputs.webAppName }}"
                    echo "webapp_name=${{ needs.deploy-infrastructure.outputs.webAppName }}" >> $GITHUB_ENV
                  fi


            - name: Deploy Azure Web App
              env:
                  WEB_APP_NAME: ${{ needs.deploy-infrastructure.outputs.webAppName || format('{0}-api', secrets.APP_NAME) }}
              run: |
                  echo "Deploying to web app: $WEB_APP_NAME"
                 
                  # Verify the web app exists
                  if ! az webapp show --name "$WEB_APP_NAME" --resource-group "${{ secrets.AZURE_RG_NAME }}" >/dev/null 2>&1; then
                    echo "ERROR: Web app '$WEB_APP_NAME' not found in resource group '${{ secrets.AZURE_RG_NAME }}'"
                    echo "Available web apps:"
                    az webapp list --resource-group "${{ secrets.AZURE_RG_NAME }}" --output table
                    exit 1
                  fi
                 
                  # Create a zip file from the web-app directory
                  echo "Creating deployment package..."
                  cd ./web-app
                  zip -r ../web-app-deploy.zip .
                  cd ..
                 
                  # Deploy using Azure CLI
                  echo "Deploying web app package..."
                  az webapp deployment source config-zip \
                    --resource-group "${{ secrets.AZURE_RG_NAME }}" \
                    --name "$WEB_APP_NAME" \
                    --src "./web-app-deploy.zip"




    deploy-static-web-app:
        name: Deploy Static Web App
        runs-on: ubuntu-latest
        needs: [build-spa, deploy-infrastructure]
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
        environment: ${{ github.event.inputs.environment || 'prod' }}
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true


            - name: Download SPA artifact
              uses: actions/download-artifact@v4
              with:
                  name: spa-dist
                  path: ./spa-dist


            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}


            - name: Configure API Endpoint and Get Deployment Token
              id: get-token
              run: |
                  echo "=== Static Web App Deployment Debug ==="
                  echo "Static Web App Name from outputs: '${{ needs.deploy-infrastructure.outputs.staticWebAppName }}'"
                  echo "Web API URL from outputs: '${{ needs.deploy-infrastructure.outputs.webAppUrl }}'"
                  echo "SPA artifact contents:"
                  ls -la ./spa-dist/
                 
                  # Get the static web app name
                  SWA_NAME="${{ needs.deploy-infrastructure.outputs.staticWebAppName }}"
                  if [ -z "$SWA_NAME" ]; then
                    SWA_NAME="${{ secrets.APP_NAME }}-swa"
                    echo "Using fallback SWA name: $SWA_NAME"
                  else
                    echo "Using SWA name from outputs: $SWA_NAME"
                  fi
                 
                  # Create environment configuration for the SPA
                  API_URL="${{ needs.deploy-infrastructure.outputs.webAppUrl }}"
                  if [ ! -z "$API_URL" ]; then
                    echo "Creating environment configuration for SPA..."
                   
                    # Create a runtime configuration file that can be loaded by the SPA
                    cat > ./spa-dist/config.js << EOF
                  window.ENV = {
                    VITE_PUBLIC_API_URL: '$API_URL'
                  };
                  console.log('Runtime config loaded:', window.ENV);
                  EOF
                   
                    # Also create a JSON config file for fetch-based loading
                    cat > ./spa-dist/config.json << EOF
                  {
                    "VITE_PUBLIC_API_URL": "$API_URL"
                  }
                  EOF
                   
                    # Inject the config script into index.html
                    if [ -f "./spa-dist/index.html" ]; then
                      echo "Injecting runtime config into index.html..."
                      sed -i 's|<head>|<head>\n    <script src="/config.js"></script>|' ./spa-dist/index.html
                      echo "✅ Runtime configuration injected into index.html"
                    else
                      echo "⚠️ index.html not found, config.js will need to be loaded manually"
                    fi
                   
                    echo "✅ API configuration created with base URL: $API_URL"
                    echo "   - JavaScript config: config.js"
                    echo "   - JSON config: config.json"
                  else
                    echo "⚠️ WARNING: No API URL found in deployment outputs"
                    echo "   SPA will use default/localhost API endpoint"
                  fi
                 
                  # Get the deployment token from Azure
                  echo "Getting deployment token for Static Web App: $SWA_NAME"
                  DEPLOYMENT_TOKEN=$(az staticwebapp secrets list \
                    --name "$SWA_NAME" \
                    --resource-group "${{ secrets.AZURE_RG_NAME }}" \
                    --query "properties.apiKey" \
                    --output tsv)
                 
                  if [ -z "$DEPLOYMENT_TOKEN" ]; then
                    echo "ERROR: Could not get deployment token for Static Web App"
                    echo "Available Static Web Apps in resource group:"
                    az staticwebapp list --resource-group "${{ secrets.AZURE_RG_NAME }}" --output table
                    exit 1
                  fi
                 
                  echo "✅ Successfully retrieved deployment token"
                  echo "deployment-token=$DEPLOYMENT_TOKEN" >> $GITHUB_OUTPUT
                 
                  # Configure the Static Web App to use the deployed Web API as backend
                  if [ ! -z "$API_URL" ] && [ ! -z "${{ needs.deploy-infrastructure.outputs.webAppName }}" ]; then
                    echo "Configuring Static Web App API backend..."
                   
                    # Set the backend configuration
                    az staticwebapp appsettings set \
                      --name "$SWA_NAME" \
                      --resource-group "${{ secrets.AZURE_RG_NAME }}" \
                      --setting-names "API_BASE_URL=$API_URL" \
                      || echo "⚠️ Could not set app settings"
                   
                    echo "✅ Static Web App configured with API backend: $API_URL"
                  fi


            - name: Deploy Static Web App (Primary Method)
              id: swa-deploy-primary
              continue-on-error: true
              uses: Azure/static-web-apps-deploy@v1
              with:
                  azure_static_web_apps_api_token: ${{ steps.get-token.outputs.deployment-token }}
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  action: "upload"
                  app_location: "./spa-dist"
                  output_location: "/"
                  skip_app_build: true


            - name: Deploy Static Web App (Fallback Method)
              if: steps.swa-deploy-primary.outcome == 'failure'
              run: |
                  echo "Primary deployment failed, trying alternative method..."
                  SWA_NAME="${{ needs.deploy-infrastructure.outputs.staticWebAppName || format('{0}-swa', secrets.APP_NAME) }}"
                 
                  # Try using Azure CLI to deploy
                  echo "Attempting deployment via Azure CLI..."
                 
                  # Create a zip of the SPA dist
                  cd ./spa-dist
                  zip -r ../spa-package.zip .
                  cd ..
                 
                  # Deploy using Azure CLI (this is a simpler approach)
                  echo "Uploading SPA files to blob storage or using alternative deployment..."
                 
                  # For now, let's just report what we would do
                  echo "SPA files are ready for deployment:"
                  echo "- Static Web App: $SWA_NAME"
                  echo "- Resource Group: ${{ secrets.AZURE_RG_NAME }}"
                  echo "- Package: spa-package.zip"
                 
                  # Note: Azure CLI doesn't have direct static web app deployment
                  # This would typically require uploading to the static web app's storage
                  echo "Manual deployment may be required - check Azure Portal"




    post-deployment:
        name: Post-Deployment Tasks
        runs-on: ubuntu-latest
        needs: [deploy-web-app, deploy-static-web-app, deploy-infrastructure]
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event_name == 'workflow_dispatch'
        environment: ${{ github.event.inputs.environment || 'prod' }}
        steps:
            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}




            - name: Run Database Migrations (Optional)
              run: |
                  echo "Database migrations would run here"
                  echo "Consider using Entity Framework migrations or SQL scripts"




            - name: Health Check - Web API
              run: |
                  WEB_API_URL="${{ needs.deploy-infrastructure.outputs.webAppUrl }}/api/health"
                  echo "Testing Web API health at: $WEB_API_URL"
                  for i in {1..5}; do
                    if curl -f "$WEB_API_URL"; then
                      echo "✅ Web API is healthy"
                      break
                    else
                      echo "⏳ Attempt $i failed, retrying in 30s..."
                      sleep 30
                    fi
                  done




            - name: Health Check - Static Web App
              run: |
                  STATIC_URL="${{ needs.deploy-infrastructure.outputs.staticWebAppUrl }}"
                  echo "Testing Static Web App at: $STATIC_URL"
                  if curl -f "$STATIC_URL"; then
                    echo "✅ Static Web App is accessible"
                  else
                    echo "⚠️ Static Web App health check failed"
                  fi
