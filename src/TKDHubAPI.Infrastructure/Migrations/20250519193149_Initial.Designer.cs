// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TKDHubAPI.Infrastructure.Data;

#nullable disable

namespace TKDHubAPI.Infrastructure.Migrations
{
    [DbContext(typeof(TkdHubDbContext))]
    [Migration("20250519193149_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Dojaang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("KoreanName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("KoreanNamePhonetic")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CoachId")
                        .IsUnique();

                    b.ToTable("Dojangs", (string)null);
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DojaangId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("DojaangId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.EventAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("AttendanceTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("StudentId");

                    b.ToTable("EventAttendances", (string)null);
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlueCornerStudentId")
                        .HasColumnType("int");

                    b.Property<int?>("DojaangId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RedCornerStudentId")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("ScoreBlue")
                        .HasColumnType("int");

                    b.Property<int>("ScoreRed")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<int?>("WinnerStudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlueCornerStudentId");

                    b.HasIndex("DojaangId");

                    b.HasIndex("RedCornerStudentId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WinnerStudentId");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DojaangId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PromotionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("DojaangId");

                    b.HasIndex("RankId");

                    b.HasIndex("StudentId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<int?>("DanLevel")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("StripeColor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Technique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MyProperty")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecommendedRankId")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Techniques");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DojaangId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DojaangId");

                    b.ToTable("Tournaments", (string)null);
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.TournamentRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentRegistrations", (string)null);
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tul", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RecommendedRankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("RecommendedRankId");

                    b.ToTable("Tuls");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.TulTechnique", b =>
                {
                    b.Property<int>("TulId")
                        .HasColumnType("int");

                    b.Property<int>("TechniqueId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("TulId", "TechniqueId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("TulTechniques");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CurrentRankId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DojaangId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JoinDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRankId");

                    b.HasIndex("DojaangId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Dojaang", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Coach")
                        .WithOne()
                        .HasForeignKey("TKDHubAPI.Domain.Entities.Dojaang", "CoachId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Dojangs_Users_CoachId");

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Event", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.Dojaang", "Dojaang")
                        .WithMany("Events")
                        .HasForeignKey("DojaangId");

                    b.Navigation("Coach");

                    b.Navigation("Dojaang");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.EventAttendance", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.Event", "Event")
                        .WithMany("EventAttendances")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Student")
                        .WithMany("EventAttendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Match", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.User", "BlueCornerStudent")
                        .WithMany()
                        .HasForeignKey("BlueCornerStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.Dojaang", "Dojaang")
                        .WithMany()
                        .HasForeignKey("DojaangId");

                    b.HasOne("TKDHubAPI.Domain.Entities.User", "RedCornerStudent")
                        .WithMany()
                        .HasForeignKey("RedCornerStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.User", "WinnerStudent")
                        .WithMany()
                        .HasForeignKey("WinnerStudentId");

                    b.Navigation("BlueCornerStudent");

                    b.Navigation("Dojaang");

                    b.Navigation("RedCornerStudent");

                    b.Navigation("Tournament");

                    b.Navigation("WinnerStudent");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.Dojaang", "Dojaang")
                        .WithMany()
                        .HasForeignKey("DojaangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Student")
                        .WithMany()
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired()
                        .HasConstraintName("FK_Promotions_Users_StudentId");

                    b.Navigation("Coach");

                    b.Navigation("Dojaang");

                    b.Navigation("Rank");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tournament", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.Dojaang", null)
                        .WithMany("Tournaments")
                        .HasForeignKey("DojaangId");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.TournamentRegistration", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Student")
                        .WithMany("TournamentRegistrations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Registrations")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tul", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.Rank", "RecommendedRank")
                        .WithMany("Tuls")
                        .HasForeignKey("RecommendedRankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RecommendedRank");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.TulTechnique", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.Technique", "Technique")
                        .WithMany("TulTechniques")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.Tul", "Tul")
                        .WithMany("TulTechniques")
                        .HasForeignKey("TulId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technique");

                    b.Navigation("Tul");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.User", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.Rank", "CurrentRank")
                        .WithMany("Users")
                        .HasForeignKey("CurrentRankId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TKDHubAPI.Domain.Entities.Dojaang", "Dojaang")
                        .WithMany("Users")
                        .HasForeignKey("DojaangId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentRank");

                    b.Navigation("Dojaang");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Dojaang", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Tournaments");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventAttendances");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Rank", b =>
                {
                    b.Navigation("Tuls");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Technique", b =>
                {
                    b.Navigation("TulTechniques");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tournament", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tul", b =>
                {
                    b.Navigation("TulTechniques");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("EventAttendances");

                    b.Navigation("TournamentRegistrations");
                });
#pragma warning restore 612, 618
        }
    }
}
