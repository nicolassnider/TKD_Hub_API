// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TKDHubAPI.Infrastructure.Data;

#nullable disable

namespace TKDHubAPI.Infrastructure.Migrations
{
    [DbContext(typeof(TkdHubDbContext))]
    [Migration("20250531161753_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.AuditLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Changes")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EntityId")
                        .HasColumnType("int");

                    b.Property<string>("EntityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Operation")
                        .HasColumnType("int");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AuditLogs");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Dojaang", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("KoreanName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("KoreanNamePhonetic")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.ToTable("Dojaangs", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Main Street 123",
                            Email = "central@tkdhub.com",
                            KoreanName = "중앙관",
                            KoreanNamePhonetic = "Jung-ang Gwan",
                            Location = "Capital City",
                            Name = "Sede Central",
                            PhoneNumber = "123456789"
                        });
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("CoachId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("DojaangId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("DojaangId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.EventAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AttendanceDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan>("AttendanceTime")
                        .HasColumnType("time");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("StudentId");

                    b.ToTable("EventAttendances", (string)null);
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Match", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BlueCornerStudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("DojaangId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MatchDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RedCornerStudentId")
                        .HasColumnType("int");

                    b.Property<int>("Round")
                        .HasColumnType("int");

                    b.Property<int>("ScoreBlue")
                        .HasColumnType("int");

                    b.Property<int>("ScoreRed")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("WinnerStudentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BlueCornerStudentId");

                    b.HasIndex("DojaangId");

                    b.HasIndex("RedCornerStudentId");

                    b.HasIndex("TournamentId");

                    b.HasIndex("WinnerStudentId");

                    b.ToTable("Matches", (string)null);
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Promotion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CoachId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int>("DojaangId")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PromotionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("RankId")
                        .HasColumnType("int");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CoachId");

                    b.HasIndex("DojaangId");

                    b.HasIndex("RankId");

                    b.HasIndex("StudentId");

                    b.ToTable("Promotions");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Rank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Color")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DanLevel")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int?>("StripeColor")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Ranks");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Color = 0,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3756),
                            Description = "Beginner",
                            Name = "White Belt",
                            Order = 1
                        },
                        new
                        {
                            Id = 2,
                            Color = 0,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3762),
                            Description = "Beginner with yellow stripe",
                            Name = "White Belt with Yellow Stripe",
                            Order = 1,
                            StripeColor = 1
                        },
                        new
                        {
                            Id = 3,
                            Color = 1,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3764),
                            Description = "Basic fundamentals",
                            Name = "Yellow Belt",
                            Order = 2
                        },
                        new
                        {
                            Id = 4,
                            Color = 1,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3766),
                            Description = "Basic fundamentals with green stripe",
                            Name = "Yellow Belt with Green Stripe",
                            Order = 2,
                            StripeColor = 2
                        },
                        new
                        {
                            Id = 5,
                            Color = 2,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3799),
                            Description = "Intermediate",
                            Name = "Green Belt",
                            Order = 3
                        },
                        new
                        {
                            Id = 6,
                            Color = 2,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3801),
                            Description = "Intermediate with blue stripe",
                            Name = "Green Belt with Blue Stripe",
                            Order = 3,
                            StripeColor = 3
                        },
                        new
                        {
                            Id = 7,
                            Color = 3,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3803),
                            Description = "Advanced intermediate",
                            Name = "Blue Belt",
                            Order = 4
                        },
                        new
                        {
                            Id = 8,
                            Color = 3,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3804),
                            Description = "Advanced intermediate with red stripe",
                            Name = "Blue Belt with Red Stripe",
                            Order = 4,
                            StripeColor = 4
                        },
                        new
                        {
                            Id = 9,
                            Color = 4,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3806),
                            Description = "Advanced",
                            Name = "Red Belt",
                            Order = 5
                        },
                        new
                        {
                            Id = 10,
                            Color = 4,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3808),
                            Description = "Advanced with black stripe",
                            Name = "Red Belt with Black Stripe",
                            Order = 5,
                            StripeColor = 5
                        },
                        new
                        {
                            Id = 11,
                            Color = 5,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3810),
                            DanLevel = 1,
                            Description = "Il Dan (1st Degree Black Belt)",
                            Name = "Black Belt 1st Dan",
                            Order = 6
                        },
                        new
                        {
                            Id = 12,
                            Color = 5,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3812),
                            DanLevel = 2,
                            Description = "Ee Dan (2nd Degree) - Boo Sabeom Nim (Assistant Instructor)",
                            Name = "Black Belt 2nd Dan",
                            Order = 7
                        },
                        new
                        {
                            Id = 13,
                            Color = 5,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3814),
                            DanLevel = 3,
                            Description = "Sam Dan (3rd Degree) - Boo Sabeom Nim (Assistant Instructor)",
                            Name = "Black Belt 3rd Dan",
                            Order = 7
                        },
                        new
                        {
                            Id = 14,
                            Color = 5,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3817),
                            DanLevel = 4,
                            Description = "Sa Dan (4th Degree) - Sabeom Nim (Instructor)",
                            Name = "Black Belt 4th Dan",
                            Order = 8
                        },
                        new
                        {
                            Id = 15,
                            Color = 5,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3819),
                            DanLevel = 5,
                            Description = "Oh Dan (5th Degree) - Sabeom Nim (Instructor)",
                            Name = "Black Belt 5th Dan",
                            Order = 8
                        },
                        new
                        {
                            Id = 16,
                            Color = 5,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3820),
                            DanLevel = 6,
                            Description = "Yuk Dan (6th Degree) - Sabeom Nim (Instructor)",
                            Name = "Black Belt 6th Dan",
                            Order = 8
                        },
                        new
                        {
                            Id = 17,
                            Color = 5,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3822),
                            DanLevel = 7,
                            Description = "Chil Dan (7th Degree) - Sahyeon Nim (Master Instructor)",
                            Name = "Black Belt 7th Dan",
                            Order = 9
                        },
                        new
                        {
                            Id = 18,
                            Color = 5,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3824),
                            DanLevel = 8,
                            Description = "Pal Dan (8th Degree) - Sahyeon Nim (Master Instructor)",
                            Name = "Black Belt 8th Dan",
                            Order = 9
                        },
                        new
                        {
                            Id = 19,
                            Color = 5,
                            CreatedDate = new DateTime(2025, 5, 31, 16, 17, 52, 604, DateTimeKind.Utc).AddTicks(3825),
                            DanLevel = 9,
                            Description = "Gu Dan (9th Degree) - Saseong Nim (Grandmaster)",
                            Name = "Black Belt 9th Dan",
                            Order = 10
                        });
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Technique", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RecommendedRankId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Techniques");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tournament", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("DojaangId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Organizer")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DojaangId");

                    b.ToTable("Tournaments", (string)null);
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.TournamentRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StudentId")
                        .HasColumnType("int");

                    b.Property<int>("TournamentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentRegistrations", (string)null);
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tul", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("RecommendedRankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("VideoUrl")
                        .IsRequired()
                        .HasMaxLength(2048)
                        .HasColumnType("nvarchar(2048)");

                    b.HasKey("Id");

                    b.HasIndex("RecommendedRankId");

                    b.ToTable("Tuls");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Basic exercise for 10th gup",
                            ImageUrl = "https://example.com/",
                            Name = "Four Direction Punch",
                            RecommendedRankId = 1,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Basic exercise for 10th gup",
                            ImageUrl = "https://example.com/",
                            Name = "Four Direction Block",
                            RecommendedRankId = 1,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 3,
                            Description = "19 movements",
                            ImageUrl = "https://example.com/",
                            Name = "Chon-Ji",
                            RecommendedRankId = 2,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 4,
                            Description = "21 movements",
                            ImageUrl = "https://example.com/",
                            Name = "Dan-Gun",
                            RecommendedRankId = 3,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 5,
                            Description = "24 movements",
                            ImageUrl = "https://example.com/",
                            Name = "Do-San",
                            RecommendedRankId = 4,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 6,
                            Description = "28 movements",
                            ImageUrl = "https://example.com/",
                            Name = "Won-Hyo",
                            RecommendedRankId = 5,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 7,
                            Description = "38 movements",
                            ImageUrl = "https://example.com/",
                            Name = "Yul-Gok",
                            RecommendedRankId = 6,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 8,
                            Description = "32 movements",
                            ImageUrl = "https://example.com/",
                            Name = "Joong-Gun",
                            RecommendedRankId = 7,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 9,
                            Description = "37 movements",
                            ImageUrl = "https://example.com/",
                            Name = "Toi-Gye",
                            RecommendedRankId = 8,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 10,
                            Description = "29 movements",
                            ImageUrl = "https://example.com/",
                            Name = "Hwa-Rang",
                            RecommendedRankId = 9,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 11,
                            Description = "30 movements",
                            ImageUrl = "https://example.com/",
                            Name = "Choong-Moo",
                            RecommendedRankId = 10,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 13,
                            Description = "Kwang-Gae (39 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Kwang-Gae",
                            RecommendedRankId = 11,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 14,
                            Description = "Po-Eun (36 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Po-Eun",
                            RecommendedRankId = 11,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 15,
                            Description = "Ge-Baek (44 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Ge-Baek",
                            RecommendedRankId = 11,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 16,
                            Description = "Eui-Am (45 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Eui-Am",
                            RecommendedRankId = 12,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 17,
                            Description = "Choong-Jang (52 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Choong-Jang",
                            RecommendedRankId = 12,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 18,
                            Description = "Juche (45 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Juche",
                            RecommendedRankId = 12,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 19,
                            Description = "Ko-Dang* (39 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Ko-Dang",
                            RecommendedRankId = 12,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 20,
                            Description = "Sam-Il (33 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Sam-Il",
                            RecommendedRankId = 13,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 21,
                            Description = "Yoo-Sin (68 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Yoo-Sin",
                            RecommendedRankId = 13,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 22,
                            Description = "Choi-Yong (46 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Choi-Yong",
                            RecommendedRankId = 13,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 23,
                            Description = "Yon-Gae (49 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Yon-Gae",
                            RecommendedRankId = 14,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 24,
                            Description = "Ul-Ji (42 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Ul-Ji",
                            RecommendedRankId = 14,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 25,
                            Description = "Moon-Moo (61 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Moon-Moo",
                            RecommendedRankId = 14,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 26,
                            Description = "So-San (72 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "So-San",
                            RecommendedRankId = 15,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 27,
                            Description = "Se-Jong (24 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Se-Jong",
                            RecommendedRankId = 15,
                            VideoUrl = "https://example.com/"
                        },
                        new
                        {
                            Id = 28,
                            Description = "Tong-Il (56 movements)",
                            ImageUrl = "https://example.com/",
                            Name = "Tong-Il",
                            RecommendedRankId = 16,
                            VideoUrl = "https://example.com/"
                        });
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.TulTechnique", b =>
                {
                    b.Property<int>("TulId")
                        .HasColumnType("int");

                    b.Property<int>("TechniqueId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.HasKey("TulId", "TechniqueId");

                    b.HasIndex("TechniqueId");

                    b.ToTable("TulTechniques");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("CurrentRankId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DojaangId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("JoinDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Id");

                    b.HasIndex("CurrentRankId");

                    b.HasIndex("DojaangId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@tkdhub.com",
                            FirstName = "System",
                            Gender = "OTHER",
                            JoinDate = new DateTime(2025, 5, 31, 16, 17, 52, 647, DateTimeKind.Utc).AddTicks(4041),
                            LastName = "Administrator",
                            PasswordHash = "AQAAAAIAAYagAAAAEHNwAfBGFuigaoA1+IkHqZauHQgSu05jsx/9yAROCxzVhWHITzB9KMIsZShzfzZciw==",
                            PhoneNumber = "0000000000"
                        },
                        new
                        {
                            Id = 2,
                            CurrentRankId = 11,
                            DateOfBirth = new DateTime(1960, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "grandmaster@tkdhub.com",
                            FirstName = "Grand",
                            Gender = "OTHER",
                            JoinDate = new DateTime(2025, 5, 31, 16, 17, 52, 687, DateTimeKind.Utc).AddTicks(1906),
                            LastName = "Master",
                            PasswordHash = "AQAAAAIAAYagAAAAEKRzozr4G3pmr4mR9MCNBEwB7u0XiAShYvo0sqHrK9O9gmv/AqCfovQLfvHYtkIWYw==",
                            PhoneNumber = "1112223333"
                        });
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.UserDojaang", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("DojaangId")
                        .HasColumnType("int");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("UserId", "DojaangId");

                    b.HasIndex("DojaangId");

                    b.ToTable("UserDojaangs", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 2,
                            DojaangId = 1,
                            Role = "Coach"
                        });
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Coach"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Student"
                        });
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.UserUserRole", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "UserRoleId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("UserUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            UserRoleId = 1
                        },
                        new
                        {
                            UserId = 2,
                            UserRoleId = 2
                        });
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Dojaang", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Coach")
                        .WithMany()
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Coach");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Event", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Coach")
                        .WithMany("EventsCoached")
                        .HasForeignKey("CoachId");

                    b.HasOne("TKDHubAPI.Domain.Entities.Dojaang", "Dojaang")
                        .WithMany("Events")
                        .HasForeignKey("DojaangId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Coach");

                    b.Navigation("Dojaang");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.EventAttendance", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.Event", "Event")
                        .WithMany("EventAttendances")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Student")
                        .WithMany("EventAttendances")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Match", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.User", "BlueCornerStudent")
                        .WithMany("MatchesAsBlueCorner")
                        .HasForeignKey("BlueCornerStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.Dojaang", "Dojaang")
                        .WithMany()
                        .HasForeignKey("DojaangId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("TKDHubAPI.Domain.Entities.User", "RedCornerStudent")
                        .WithMany("MatchesAsRedCorner")
                        .HasForeignKey("RedCornerStudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.Tournament", "Tournament")
                        .WithMany()
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.User", "WinnerStudent")
                        .WithMany("MatchesAsWinner")
                        .HasForeignKey("WinnerStudentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("BlueCornerStudent");

                    b.Navigation("Dojaang");

                    b.Navigation("RedCornerStudent");

                    b.Navigation("Tournament");

                    b.Navigation("WinnerStudent");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Promotion", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Coach")
                        .WithMany("PromotionsAsCoach")
                        .HasForeignKey("CoachId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Promotions_Users_CoachId");

                    b.HasOne("TKDHubAPI.Domain.Entities.Dojaang", "Dojaang")
                        .WithMany()
                        .HasForeignKey("DojaangId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Promotions_Dojaangs_DojaangId");

                    b.HasOne("TKDHubAPI.Domain.Entities.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Promotions_Ranks_RankId");

                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Student")
                        .WithMany("PromotionsAsStudent")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Promotions_Users_StudentId");

                    b.Navigation("Coach");

                    b.Navigation("Dojaang");

                    b.Navigation("Rank");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tournament", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.Dojaang", "Dojaang")
                        .WithMany("Tournaments")
                        .HasForeignKey("DojaangId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Dojaang");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.TournamentRegistration", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.User", "Student")
                        .WithMany("TournamentRegistrations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Registrations")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tul", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.Rank", "RecommendedRank")
                        .WithMany("Tuls")
                        .HasForeignKey("RecommendedRankId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("RecommendedRank");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.TulTechnique", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.Technique", "Technique")
                        .WithMany("TulTechniques")
                        .HasForeignKey("TechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.Tul", "Tul")
                        .WithMany("TulTechniques")
                        .HasForeignKey("TulId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Technique");

                    b.Navigation("Tul");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.User", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.Rank", "CurrentRank")
                        .WithMany("Users")
                        .HasForeignKey("CurrentRankId");

                    b.HasOne("TKDHubAPI.Domain.Entities.Dojaang", "Dojaang")
                        .WithMany("Users")
                        .HasForeignKey("DojaangId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("CurrentRank");

                    b.Navigation("Dojaang");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.UserDojaang", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.Dojaang", "Dojaang")
                        .WithMany("UserDojaangs")
                        .HasForeignKey("DojaangId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.User", "User")
                        .WithMany("UserDojaangs")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Dojaang");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.UserUserRole", b =>
                {
                    b.HasOne("TKDHubAPI.Domain.Entities.User", "User")
                        .WithMany("UserUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TKDHubAPI.Domain.Entities.UserRole", "UserRole")
                        .WithMany("UserUserRoles")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("UserRole");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Dojaang", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Tournaments");

                    b.Navigation("UserDojaangs");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Event", b =>
                {
                    b.Navigation("EventAttendances");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Rank", b =>
                {
                    b.Navigation("Tuls");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Technique", b =>
                {
                    b.Navigation("TulTechniques");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tournament", b =>
                {
                    b.Navigation("Registrations");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.Tul", b =>
                {
                    b.Navigation("TulTechniques");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.User", b =>
                {
                    b.Navigation("EventAttendances");

                    b.Navigation("EventsCoached");

                    b.Navigation("MatchesAsBlueCorner");

                    b.Navigation("MatchesAsRedCorner");

                    b.Navigation("MatchesAsWinner");

                    b.Navigation("PromotionsAsCoach");

                    b.Navigation("PromotionsAsStudent");

                    b.Navigation("TournamentRegistrations");

                    b.Navigation("UserDojaangs");

                    b.Navigation("UserUserRoles");
                });

            modelBuilder.Entity("TKDHubAPI.Domain.Entities.UserRole", b =>
                {
                    b.Navigation("UserUserRoles");
                });
#pragma warning restore 612, 618
        }
    }
}
