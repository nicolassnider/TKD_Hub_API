name: Deploy TKD Hub to Azure (FREE TIER)

permissions:
    id-token: write
    contents: read

on:
    push:
        branches: [free-tier]
    pull_request:
        branches: [free-tier]
    workflow_dispatch:
        inputs:
            environment:
                description: "Target environment"
                required: true
                default: "dev"
                type: choice
                options:
                    - dev

env:
    AZURE_WEBAPP_PACKAGE_PATH: "./src/TKDHubAPI.WebAPI"
    SPA_PATH: "./Frontend/spa"
    DOTNET_VERSION: "8.0.x"
    NODE_VERSION: "18.x"

jobs:
    test:
        name: Run Tests
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restore dependencies
              run: dotnet restore

            - name: Build
              run: dotnet build --no-restore --configuration Release

            - name: Test
              run: dotnet test --no-build --configuration Release --verbosity minimal

    build-api:
        name: Build Web API
        runs-on: ubuntu-latest
        needs: test
        steps:
            - uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: ${{ env.DOTNET_VERSION }}

            - name: Restore dependencies
              run: dotnet restore
              working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

            - name: Build and publish (optimized for free tier)
              run: |
                  dotnet build --configuration Release --no-restore
                  dotnet publish --configuration Release --no-build --output ./publish \
                    --self-contained false \
                    --verbosity minimal \
                    /p:PublishTrimmed=false \
                    /p:DebugType=None \
                    /p:DebugSymbols=false \
                    /p:PublishSingleFile=false
              working-directory: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}

            - name: Upload Web API artifact
              uses: actions/upload-artifact@v4
              with:
                  name: web-app-free
                  path: ${{ env.AZURE_WEBAPP_PACKAGE_PATH }}/publish
                  retention-days: 1

    build-spa:
        name: Build SPA
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Setup Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: ${{ env.NODE_VERSION }}
                  cache: "npm"

            - name: Install dependencies
              run: |
                  cd Frontend/spa
                  npm ci --production

            - name: Build SPA (optimized for free tier)
              run: |
                  cd Frontend/spa
                  npm run build

            - name: Upload SPA artifact
              uses: actions/upload-artifact@v4
              with:
                  name: spa-dist-free
                  path: "Frontend/spa/dist"
                  retention-days: 1

    deploy-infrastructure:
        name: Deploy Infrastructure (FREE TIER)
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/free-tier' || github.event_name == 'workflow_dispatch'
        environment: ${{ github.event.inputs.environment || 'dev' }}
        outputs:
            webAppName: ${{ steps.deploy.outputs.webAppName }}
            webAppUrl: ${{ steps.deploy.outputs.webAppUrl }}
            staticWebAppName: ${{ steps.deploy.outputs.staticWebAppName }}
            staticWebAppUrl: ${{ steps.deploy.outputs.staticWebAppUrl }}
        steps:
            - uses: actions/checkout@v4

            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Create Resource Group
              run: |
                  az group create --name ${{ secrets.AZURE_RG_NAME_FREE }} --location "${{ secrets.AZURE_LOCATION || 'eastus' }}"

            - name: Generate JWT Secret Key
              id: generate-jwt
              run: |
                  # Generate a secure JWT key if not provided
                  if [ -z "${{ secrets.JWT_KEY }}" ]; then
                    JWT_KEY=$(openssl rand -hex 32)
                    echo "Generated new JWT key"
                  else
                    JWT_KEY="${{ secrets.JWT_KEY }}"
                    echo "Using provided JWT key"
                  fi
                  echo "jwt-key=$JWT_KEY" >> $GITHUB_OUTPUT
                  
                  # Set JWT issuer and audience based on app URL
                  JWT_ISSUER="https://${{ secrets.APP_NAME_FREE }}-api-free.azurewebsites.net"
                  JWT_AUDIENCE="https://${{ secrets.APP_NAME_FREE }}-api-free.azurewebsites.net"
                  echo "jwt-issuer=$JWT_ISSUER" >> $GITHUB_OUTPUT
                  echo "jwt-audience=$JWT_AUDIENCE" >> $GITHUB_OUTPUT

            - name: Validate Bicep template
              run: |
                  echo "Validating FREE TIER Bicep template..."
                  az deployment group validate \
                    --resource-group "${{ secrets.AZURE_RG_NAME_FREE }}" \
                    --template-file ./infra/.main.free.bicep \
                    --parameters \
                      appName="${{ secrets.APP_NAME_FREE }}" \
                      location="${{ secrets.AZURE_LOCATION || 'eastus' }}" \
                      sqlAdminLogin="${{ secrets.SQL_ADMIN_LOGIN }}" \
                      sqlAdminPassword="${{ secrets.SQL_ADMIN_PASSWORD }}" \
                      environment="${{ github.event.inputs.environment || 'dev' }}" \
                      jwtKey="${{ steps.generate-jwt.outputs.jwt-key }}" \
                      jwtIssuer="${{ steps.generate-jwt.outputs.jwt-issuer }}" \
                      jwtAudience="${{ steps.generate-jwt.outputs.jwt-audience }}" \
                      dojaangName="${{ secrets.DOJANG_NAME || 'TKD Hub Central (Free)' }}" \
                      dojaangAddress="${{ secrets.DOJANG_ADDRESS || 'Main Street 123' }}" \
                      dojaangLocation="${{ secrets.DOJANG_LOCATION || 'Central City' }}" \
                      dojaangPhoneNumber="${{ secrets.DOJANG_PHONE || '' }}" \
                      dojaangEmail="${{ secrets.DOJANG_EMAIL || '' }}" \
                      grandMasterFirstName="${{ secrets.GRANDMASTER_FIRST_NAME || 'Grand' }}" \
                      grandMasterLastName="${{ secrets.GRANDMASTER_LAST_NAME || 'Master' }}" \
                      grandMasterEmail="${{ secrets.GRANDMASTER_EMAIL || '' }}" \
                      grandMasterPassword="${{ secrets.GRANDMASTER_PASSWORD }}"
                  echo "Template validation completed"

            - name: Deploy FREE TIER Bicep template
              id: deploy
              run: |
                  deployment_name="tkdhub-free-deployment-${{ github.run_number }}"
                  echo "Starting FREE TIER deployment: $deployment_name"
                  echo "Resource Group: ${{ secrets.AZURE_RG_NAME_FREE }}"
                  echo "Template File: ./infra/.main.free.bicep"
                 
                  # Deploy using Azure CLI
                  echo "Executing FREE TIER deployment..."
                  az deployment group create \
                    --resource-group "${{ secrets.AZURE_RG_NAME_FREE }}" \
                    --template-file ./infra/.main.free.bicep \
                    --name "$deployment_name" \
                    --parameters \
                      appName="${{ secrets.APP_NAME_FREE }}" \
                      location="${{ secrets.AZURE_LOCATION || 'eastus' }}" \
                      sqlAdminLogin="${{ secrets.SQL_ADMIN_LOGIN }}" \
                      sqlAdminPassword="${{ secrets.SQL_ADMIN_PASSWORD }}" \
                      environment="${{ github.event.inputs.environment || 'dev' }}" \
                      jwtKey="${{ steps.generate-jwt.outputs.jwt-key }}" \
                      jwtIssuer="${{ steps.generate-jwt.outputs.jwt-issuer }}" \
                      jwtAudience="${{ steps.generate-jwt.outputs.jwt-audience }}" \
                      dojaangName="${{ secrets.DOJANG_NAME || 'TKD Hub Central (Free)' }}" \
                      dojaangAddress="${{ secrets.DOJANG_ADDRESS || 'Main Street 123' }}" \
                      dojaangLocation="${{ secrets.DOJANG_LOCATION || 'Central City' }}" \
                      dojaangPhoneNumber="${{ secrets.DOJANG_PHONE || '' }}" \
                      dojaangEmail="${{ secrets.DOJANG_EMAIL || '' }}" \
                      grandMasterFirstName="${{ secrets.GRANDMASTER_FIRST_NAME || 'Grand' }}" \
                      grandMasterLastName="${{ secrets.GRANDMASTER_LAST_NAME || 'Master' }}" \
                      grandMasterEmail="${{ secrets.GRANDMASTER_EMAIL || '' }}" \
                      grandMasterPassword="${{ secrets.GRANDMASTER_PASSWORD }}" \
                    --verbose \
                    --output table
                 
                  echo "Getting deployment outputs..."
                  deployment_output=$(az deployment group show \
                    --resource-group "${{ secrets.AZURE_RG_NAME_FREE }}" \
                    --name "$deployment_name" \
                    --output json)
                 
                  # Extract outputs for use in later jobs
                  echo "webAppName=$(echo $deployment_output | jq -r '.properties.outputs.webAppName.value')" >> $GITHUB_OUTPUT
                  echo "webAppUrl=$(echo $deployment_output | jq -r '.properties.outputs.webAppUrl.value')" >> $GITHUB_OUTPUT
                  echo "staticWebAppName=$(echo $deployment_output | jq -r '.properties.outputs.staticWebAppName.value')" >> $GITHUB_OUTPUT
                  echo "staticWebAppUrl=$(echo $deployment_output | jq -r '.properties.outputs.staticWebAppUrl.value')" >> $GITHUB_OUTPUT

    deploy-web-app:
        name: Deploy Web API (FREE TIER)
        runs-on: ubuntu-latest
        needs: [build-api, deploy-infrastructure]
        if: github.ref == 'refs/heads/free-tier' || github.event_name == 'workflow_dispatch'
        environment: ${{ github.event.inputs.environment || 'dev' }}
        steps:
            - name: Download Web API artifact
              uses: actions/download-artifact@v4
              with:
                  name: web-app-free
                  path: ./web-app

            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Deploy Azure Web App (FREE TIER)
              env:
                  WEB_APP_NAME: ${{ needs.deploy-infrastructure.outputs.webAppName }}
              run: |
                  echo "Deploying to FREE TIER web app: $WEB_APP_NAME"
                 
                  # Create a zip file from the web-app directory
                  echo "Creating deployment package..."
                  cd ./web-app
                  zip -r ../web-app-deploy-free.zip . -x "*.pdb" "*.xml" "*.Development.*"
                  cd ..
                 
                  echo "Package size: $(ls -lh web-app-deploy-free.zip | awk '{print $5}')"
                 
                  # Deploy using zip deployment (more reliable for free tier)
                  echo "Deploying web app package..."
                  az webapp deployment source config-zip \
                    --resource-group "${{ secrets.AZURE_RG_NAME_FREE }}" \
                    --name "$WEB_APP_NAME" \
                    --src "./web-app-deploy-free.zip" \
                    --timeout 600

            - name: Basic Health Check
              env:
                  WEB_APP_NAME: ${{ needs.deploy-infrastructure.outputs.webAppName }}
              run: |
                  APP_URL="${{ needs.deploy-infrastructure.outputs.webAppUrl }}"
                  echo "Basic health check for FREE TIER app at: $APP_URL"
                 
                  # Wait for deployment to settle
                  sleep 60
                 
                  # Simple health check
                  curl -f "$APP_URL" || echo "App may still be starting up"

    deploy-static-web-app:
        name: Deploy Static Web App (FREE TIER)
        runs-on: ubuntu-latest
        needs: [build-spa, deploy-infrastructure]
        if: github.ref == 'refs/heads/free-tier' || github.event_name == 'workflow_dispatch'
        environment: ${{ github.event.inputs.environment || 'dev' }}
        steps:
            - uses: actions/checkout@v4
              with:
                  submodules: true

            - name: Download SPA artifact
              uses: actions/download-artifact@v4
              with:
                  name: spa-dist-free
                  path: ./spa-dist

            - name: Azure Login
              uses: azure/login@v1
              with:
                  creds: ${{ secrets.AZURE_CREDENTIALS }}

            - name: Configure API Endpoint and Get Deployment Token
              id: get-token
              run: |
                  echo "=== FREE TIER Static Web App Deployment ==="
                  SWA_NAME="${{ needs.deploy-infrastructure.outputs.staticWebAppName }}"
                  API_URL="${{ needs.deploy-infrastructure.outputs.webAppUrl }}"
                 
                  # Create runtime configuration for the SPA
                  if [ ! -z "$API_URL" ]; then
                    echo "Creating environment configuration for SPA..."
                   
                    cat > ./spa-dist/config.js << EOF
                  window.ENV = {
                    VITE_PUBLIC_API_URL: '$API_URL'
                  };
                  console.log('FREE TIER Runtime config loaded:', window.ENV);
                  EOF
                   
                    # Inject the config script into index.html
                    if [ -f "./spa-dist/index.html" ]; then
                      sed -i 's|<head>|<head>\n    <script src="/config.js"></script>|' ./spa-dist/index.html
                    fi
                   
                    echo "✅ FREE TIER API configuration created with base URL: $API_URL"
                  fi
                 
                  # Get the deployment token
                  echo "Getting deployment token for Static Web App: $SWA_NAME"
                  DEPLOYMENT_TOKEN=$(az staticwebapp secrets list \
                    --name "$SWA_NAME" \
                    --resource-group "${{ secrets.AZURE_RG_NAME_FREE }}" \
                    --query "properties.apiKey" \
                    --output tsv)
                 
                  echo "✅ Successfully retrieved deployment token"
                  echo "deployment-token=$DEPLOYMENT_TOKEN" >> $GITHUB_OUTPUT

            - name: Deploy Static Web App (FREE TIER)
              uses: Azure/static-web-apps-deploy@v1
              with:
                  azure_static_web_apps_api_token: ${{ steps.get-token.outputs.deployment-token }}
                  repo_token: ${{ secrets.GITHUB_TOKEN }}
                  action: "upload"
                  app_location: "./spa-dist"
                  output_location: "/"
                  skip_app_build: true

    post-deployment:
        name: Post-Deployment Summary (FREE TIER)
        runs-on: ubuntu-latest
        needs: [deploy-web-app, deploy-static-web-app, deploy-infrastructure]
        if: github.ref == 'refs/heads/free-tier' || github.event_name == 'workflow_dispatch'
        environment: ${{ github.event.inputs.environment || 'dev' }}
        steps:
            - name: Deployment Summary
              run: |
                  echo "🎉 FREE TIER Deployment Complete!"
                  echo ""
                  echo "📊 Cost Estimate:"
                  echo "• Web App: FREE (F1 tier)"
                  echo "• Static Web App: FREE"
                  echo "• SQL Database: ~$5/month (Basic tier)"
                  echo "• Storage Account: ~$0.50/month (LRS)"
                  echo "• Total Estimated Cost: ~$5.50/month"
                  echo ""
                  echo "🔗 Application URLs:"
                  echo "• Web API: ${{ needs.deploy-infrastructure.outputs.webAppUrl }}"
                  echo "• Frontend: ${{ needs.deploy-infrastructure.outputs.staticWebAppUrl }}"
                  echo ""
                  echo "⚠️ FREE TIER Limitations:"
                  echo "• 1GB storage limit"
                  echo "• 165 minutes/day compute time"
                  echo "• App sleeps after 20 minutes of inactivity"
                  echo "• No custom domains or SSL certificates"
                  echo "• No Key Vault (secrets in app settings)"
                  echo "• No Application Insights"
                  echo ""
                  echo "✅ Perfect for development and testing!"
